#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>

/*----------------------------------------------------------------------------------------------*/

void gettftp();
void puttftp();

/*----------------------------------------------------------------------------------------------*/

int main(int argc, char *argv[]) {

    // Checking number of arguments
    if (argc != 3){
        perror("Invalid number of argments");
        exit(EXIT_FAILURE);
    }

    // Determination of the first command-line argument
    if(strcmp(argv[1],"gettftp")==0){
        gettftp(argv[2],argv[3]);
    }
    if(strcmp(argv[1],"puttftp")==0){
        puttftp(argv[2],argv[3]);
    }
    return 0;
}

/*----------------------------------------------------------------------------------------------*/

void gettftp(const char *server_address_str, const char *filename) {
    struct addrinfo hints;
    struct addrinfo *serverinfo;
    int status;

    // Adress information setup
    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_protocol = IPPROTO_UDP;


    // Getting the server address
    if ((status = getaddrinfo(server_address_str, "69", &hints, &serverinfo)) != 0) {
        perror("Error 'Getaddrinfo'");
        exit(EXIT_FAILURE);
    }


    // Creating a UDP socket
    int socket_ = socket(serverinfo->ai_family, serverinfo->ai_socktype, serverinfo->ai_protocol);

    // Checking socket creation
    if (socket_ < 0) {
        perror("Error 'socket'");
        exit(EXIT_FAILURE);
    }

    // Building the RRQ (Read Request) packet
    char rrq_packet[516]; // Maximum size for TFTP packet
    rrq_packet[0] = 0x00; // Opcode 1st byte
    rrq_packet[1] = 0x01; // Opcode 2nd byte
    strcpy(&rrq_packet[2], filename); // Filename
    strcpy(&rrq_packet[2 + strlen(filename) + 1], "octet"); // Mode

    // Sending the RRQ packet to the server
    if (sendto(socket_, rrq_packet, 2 + strlen(filename) + 1 + strlen("octet") + 1,
               0, serverinfo->ai_addr, serverinfo->ai_addrlen) == -1) {
        perror("Error 'sendto'");
        exit(EXIT_FAILURE);
    }
    freeaddrinfo(serverinfo);
    close(socket_);
}

/*----------------------------------------------------------------------------------------------*/

void puttftp(){};
